package problems.problem8;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class LargestProductInASeries {
	/*
	 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
	 * 
	 * 73167176531330624919225119674426574742355349194934
	 * 96983520312774506326239578318016984801869478851843
	 * 85861560789112949495459501737958331952853208805511
	 * 12540698747158523863050715693290963295227443043557
	 * 66896648950445244523161731856403098711121722383113
	 * 62229893423380308135336276614282806444486645238749
	 * 30358907296290491560440772390713810515859307960866
	 * 70172427121883998797908792274921901699720888093776
	 * 65727333001053367881220235421809751254540594752243
	 * 52584907711670556013604839586446706324415722155397
	 * 53697817977846174064955149290862569321978468622482
	 * 83972241375657056057490261407972968652414535100474
	 * 82166370484403199890008895243450658541227588666881
	 * 16427171479924442928230863465674813919123162824586
	 * 17866458359124566529476545682848912883142607690042
	 * 24219022671055626321111109370544217506941658960408
	 * 07198403850962455444362981230987879927244284909188
	 * 84580156166097919133875499200524063689912560717606
	 * 05886116467109405077541002256983155200055935729725
	 * 71636269561882670428252483600823257530420752963450
	 * 
	 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
	 */
	public static void main(String[] args) {
		long begin = System.currentTimeMillis(); // stores the start time
		
		String digits = "73167176531330624919225119674426574742355349194934"
					  + "96983520312774506326239578318016984801869478851843"
					  + "85861560789112949495459501737958331952853208805511"
					  + "12540698747158523863050715693290963295227443043557"
					  + "66896648950445244523161731856403098711121722383113"
					  + "62229893423380308135336276614282806444486645238749"
					  + "30358907296290491560440772390713810515859307960866"
					  + "70172427121883998797908792274921901699720888093776"
					  + "65727333001053367881220235421809751254540594752243"
					  + "52584907711670556013604839586446706324415722155397"
					  + "53697817977846174064955149290862569321978468622482"
					  + "83972241375657056057490261407972968652414535100474"
					  + "82166370484403199890008895243450658541227588666881"
					  + "16427171479924442928230863465674813919123162824586"
					  + "17866458359124566529476545682848912883142607690042"
					  + "24219022671055626321111109370544217506941658960408"
					  + "07198403850962455444362981230987879927244284909188"
					  + "84580156166097919133875499200524063689912560717606"
					  + "05886116467109405077541002256983155200055935729725"
					  + "71636269561882670428252483600823257530420752963450"; // initializes the big ugly number as a String (no number type in java can store 1000 digits, and a String is easier to parse i.e. find individual characters, in this case digits)
		List<Long> productList = new ArrayList<Long>(); // initializes a list of the products, to be added to below
		for(int i = 0; i <= 987; i++) { // runs through each digit of the big number until the digit 12 characters ahead (for a 13-character substring) is the last digit, this index is 12 before the last index (999)
			long product = 1; // initializes the current product
			for(int j = i; j <= (i+12); j++) { // iterates through every digit of the current 13-digit substring
				product = product * Integer.parseInt(digits.substring(j, j + 1)); // multiplies the current product by the current digit
			}
			productList.add(product); // adds the current product to the list of products
		}
		System.out.println(Collections.max(productList)); // prints the max value in the product list
		
		long end = System.currentTimeMillis(); // stores the end time
		System.out.println(end-begin + "ms"); // prints the time taken for the program to execute
	}
}
