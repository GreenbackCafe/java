package problems.problem12;

import java.util.ArrayList;
import java.util.List;

public class HighlyDivisibleTriangularNumber {
	/*
	 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	 * 
	 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	 * 
	 * Let us list the factors of the first seven triangle numbers:
	 * 
	 * 1: 1
	 * 3: 1,3
	 * 6: 1,2,3,6
	 * 10: 1,2,5,10
	 * 15: 1,3,5,15
	 * 21: 1,3,7,21
	 * 28: 1,2,4,7,14,28
	 * 
	 * We can see that 28 is the first triangle number to have over five divisors.
	 * 
	 * What is the value of the first triangle number to have over five hundred divisors?
	 */
	public static void main(String[] args) {
		long begin = System.currentTimeMillis(); // stores the start time
		
		int currentTriangle = 1; // initializes the variable that represents the current triangle number (tested and incremented below)
		int additive = 1; // initializes the variable that is added to the current triangle number to get the next triangle number (incremented below)
		while(true) { // loop continues until number is found
			if(divisorList(currentTriangle).size() > 500) { // if the current triangle number has more than 500 divisors (the list of its divisors is longer than 500 entries)
				System.out.println(currentTriangle); // then print the current triangle number
				break; // and break out of the loop (terminate the program since the number has been found)
			}
			additive = additive + 1; // add 1 to the number that is added to the current triangle number
			currentTriangle = currentTriangle + additive; // add the additive to the current triangle number to get the next triangle number
		}
		
		long end = System.currentTimeMillis(); // stores the end time
		System.out.println(end-begin + "ms"); // prints the time taken for the program to execute
	}
	
	public static List<Integer> divisorList(int input) { // method to generate a list of an integer's divisors
		List<Integer> divisors = new ArrayList<Integer>(); // initializes the list of divisors, added to below
		for(int i = 1; i <= (Math.sqrt(input)); i++) { // iterates through all integers from 1 to the square root of the input (greater factors are found from dividing the input by the current divisor)
			if(input % i == 0) { // if the input is divisible by the current number
				divisors.add(i); // then add the current number to the list
				divisors.add(input/i); // as well as the input divided by the current number (since this is greater than the square root of the input)
			}
		}
		return divisors; // return the list of divisors (after all divisors of the input have been found)
	}
}
